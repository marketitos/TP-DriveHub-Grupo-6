@startuml TP-Integrador

class SistemaDeReserva{
    - Autos:Auto []
    - clientes: Cliente[]
    - Reservas: Reserva []

    + crearReserva(cliente:Cliente, auto:Auto ,fechaInicio:Date, fechaFin:Date):void
    + verificarDisponibilidad():void
    + agregarAuto(a:Auto):void
    + eliminarAuto(nroMatricula:number):void
    + agregarCliente(c:Cliente):void
    + eliminarCliente(legajo:number):void
    + agregarReserva(r:Reserva):void
    + eliminarReserva(idReserva:number):void
}


class Reserva{
    - idReserva:number
    - cliente:Cliente
    - fechaInicio:Date
    - fechaFin:Date
    - Auto:Auto 
    - kilometraje:number 

    + getters y setters ()
    + costoTotalReserva():number
    + getDias():number
}


abstract class Auto{
    - nroMatricula:number
    - estado: ESTADO
    - tarifa: number
    - cargoAdicional: number

    + getters y setters ()
    + aplicarCargo(dias:number):number
    + calcularBase(r:Reserva):number
    + actualizarEstado():void
}
class Compacto extends Auto{
}
class Sedan extends Auto{
}

class SUV extends Auto{
    - cargoFijo:number
}

note right of Auto{
    calcularBase(r:Reserva)
        lo que haria seria obtener los dias de la reserva con el metodo  calcularDiasReserva()
        y multiplicaria los dias por 100 que son los kilometros

        despues con el get de kilometraje en reserva preguntaria si el kilometraje es > a el resultado anterior
        que reste esos valores y el resultado multiplicarlo por 0.15
}



note left of Auto{
    calcularBase()
        Calcular los dias de alquiler atravez de la reserva y multiplicar esto por su tarifa
        (FechaInicio-FechaFin)*tarifaBase
    
}


class Cliente{
    - legajo:number
    - nroReserva:number
    - nombre:String
    - reservas:Reserva []

    + getters y setters ()
    + agregarReserva(r:Reserva):void
}

enum ESTADO_VEHICULO{
    DISPONIBLE: String
    EnAlquiler:String
    Mantenimiento:String
    Limpieza:String
}



Reserva --o Auto

Reserva --o Cliente

Reserva -up-* SistemaDeReserva


@enduml